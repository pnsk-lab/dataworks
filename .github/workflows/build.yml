name: Build DataWorks

on:
  workflow_dispatch:
  schedule:
  - cron: "0 */6 * * *"

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-generic:

    name: "Build for Linux/Windows/DOS"

    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Give tar root suid
      run: sudo chown root /usr/bin/tar && sudo chmod u+s /usr/bin/tar
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore cache
      uses: actions/cache@v4
      with:
        save-always: true
        path: |
          /var/cache/apt
          /usr/watcom
        key: cache-${{ github.sha }}
        restore-keys: cache-
    - name: Install packages
      run: sudo apt-get install zip byacc flex doxygen mingw-w64 graphviz
    - name: Create /usr/watcom
      run: sudo mkdir -p /usr/watcom
    - name: Install Open Watcom
      run: curl -L https://github.com/open-watcom/open-watcom-v2/releases/download/Last-CI-build/ow-snapshot.tar.xz | sudo tar xvJf - -C /usr/watcom
    - name: Add PATH
      run: echo "/usr/watcom/binl64" >> $GITHUB_PATH
    - name: Add WATCOM env
      run: echo "WATCOM=/usr/watcom" >> $GITHUB_ENV
    - name: Add INCLUDE env
      run: echo "INCLUDE=/usr/watcom/h" >> $GITHUB_ENV
    - name: Make sure it is clean (linux64)
      run: make clean
    - name: Make for linux64
      run: make YACC=byacc -j3 archive
    - name: Setup Pages
      uses: actions/configure-pages@v4
    - name: Upload pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: "Document/doc/html"
    - name: Deploy
      uses: actions/deploy-pages@v4
    - name: Rename to -linux64
      run: mv dataworks.zip dataworks-linux64.zip && mv dataworks.tar.gz dataworks-linux64.tar.gz && mv Client/dataworks dataworks-linux64 && mv Server/dataworks_server dataworks-server-linux64
    - name: Make sure it is clean (win32)
      run: make clean PLATFORM=win32
    - name: Make for win32
      run: make YACC=byacc PLATFORM=win32 -j3 archive
    - name: Rename to -win32
      run: mv dataworks.zip dataworks-win32.zip && mv dataworks.tar.gz dataworks-win32.tar.gz && mv Client/dataworks.exe dataworks-win32.exe && mv Server/dataworks_server.exe dataworks-server-win32.exe
    - name: Make sure it is clean (win64)
      run: make clean PLATFORM=win64
    - name: Make for win64
      run: make YACC=byacc PLATFORM=win64 -j3 archive
    - name: Rename to -win64
      run: mv dataworks.zip dataworks-win64.zip && mv dataworks.tar.gz dataworks-win64.tar.gz && mv Client/dataworks.exe dataworks-win64.exe && mv Server/dataworks_server.exe dataworks-server-win64.exe
    - name: Make sure it is clean (dos)
      run: make clean PLATFORM=dos
    - name: Make for DOS
      run: make YACC=byacc PLATFORM=dos -j3 archive
    - name: Rename to -dos
      run: mv dataworks.zip dataworks-dos.zip && mv dataworks.tar.gz dataworks-dos.tar.gz && mv Client/dataworks.exe dataworks-dos.exe && mv Server/dataworks_server.exe dataworks-server-dos.exe
    - name: Make sure it is clean (dos4g)
      run: make clean PLATFORM=dos4g
    - name: Make for DOS/4GW
      run: make YACC=byacc PLATFORM=dos4g -j3 archive
    - name: Rename to -dos4g
      run: mv dataworks.zip dataworks-dos4g.zip && mv dataworks.tar.gz dataworks-dos4g.tar.gz && mv Client/dataworks.exe dataworks-dos4g.exe && mv Server/dataworks_server.exe dataworks-server-dos4g.exe
    - name: Create artifact
      run: zip -rv build-generic.zip dataworks-*.tar.gz dataworks-*.zip dataworks-server-win32.exe dataworks-server-win64.exe dataworks-server-dos.exe dataworks-server-dos4g.exe dataworks-win32.exe dataworks-win64.exe dataworks-dos.exe dataworks-dos4g.exe dataworks-linux64 dataworks-server-linux64
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-generic
        path: build-generic.zip
    - name: Kill apt-get
      run: sudo killall apt-get || true
  build-mac:

    name: "Build for MacOS"

    runs-on: macos-latest

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install packages
      run: brew install flex byacc make doxygen graphviz
    - name: Make
      run: make -j3 YACC=byacc archive
    - name: Rename
      run: mv dataworks.tar.gz dataworks-macos-arm64.tar.gz && mv dataworks.zip dataworks-macos-arm64.zip && mv Client/dataworks dataworks-macos-arm64 && mv Server/dataworks_server dataworks-server-macos-arm64
    - name: Create artifact
      run: zip -rv build-macos.zip dataworks-*.tar.gz dataworks-*.zip dataworks-server-macos-arm64 dataworks-macos-arm64
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-macos
        path: build-macos.zip

  build-debpkg:

    name: "Build for .deb"

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install packages
      run: sudo apt install flex byacc make graphviz
    - name: Make
      run: make YACC=byacc ./Package/dataworks.deb DEB_ARCH=amd64
    - name: Rename
      run: mv Package/dataworks.deb dataworks.deb
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-debpkg
        path: dataworks.deb

  build-dosimg:

    name: "Build for DOS floppy image"

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install packages
      run: sudo apt install flex byacc make graphviz mtools xvfb dosbox
    - name: Create /usr/watcom
      run: sudo mkdir -p /usr/watcom
    - name: Install Open Watcom
      run: curl -L https://github.com/open-watcom/open-watcom-v2/releases/download/Last-CI-build/ow-snapshot.tar.xz | sudo tar xvJf - -C /usr/watcom
    - name: Add PATH
      run: echo "/usr/watcom/binl64" >> $GITHUB_PATH
    - name: Add WATCOM env
      run: echo "WATCOM=/usr/watcom" >> $GITHUB_ENV
    - name: Add INCLUDE env
      run: echo "INCLUDE=/usr/watcom/h" >> $GITHUB_ENV
    - name: Make
      run: xvfb-run make YACC=byacc dos-installer
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-dosimg
        path: install.img


  release:
    
    name: "Release"

    runs-on: ubuntu-latest

    permissions:
      contents: write

    needs: [build-generic, build-mac, build-debpkg, build-dosimg]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download from build-generic
      uses: actions/download-artifact@v4
      with:
        name: build-generic
    - name: Download from build-macos
      uses: actions/download-artifact@v4
      with:
        name: build-macos
    - name: Download from build-debpkg
      uses: actions/download-artifact@v4
      with:
        name: build-debpkg
    - name: Download from build-dosimg
      uses: actions/download-artifact@v4
      with:
        name: build-dosimg
    - name: Extract the build-generic
      run: unzip $GITHUB_WORKSPACE/build-generic.zip
    - name: Extract the build-macos
      run: unzip $GITHUB_WORKSPACE/build-macos.zip
    - name: Rename dataworks.deb
      run: mv dataworks.deb dataworks-amd64-ubuntu.deb
    - name: Release
      run: gh release create -t "Release $(date +"%a %b %e %H:%M:%S %Z %Y")" "$(date +%Y%m%d%H%M%S)" dataworks-linux64.{tar.gz,zip} dataworks-win32.{tar.gz,zip} dataworks-dos4g.{tar.gz,zip} dataworks-dos.{tar.gz,zip} dataworks-win64.{tar.gz,zip} dataworks-macos-arm64.{tar.gz,zip} dataworks-server-win32.exe dataworks-server-win64.exe dataworks-server-dos.exe dataworks-server-dos4g.exe dataworks-win32.exe dataworks-win64.exe dataworks-dos.exe dataworks-dos4g.exe dataworks-linux64 dataworks-server-linux64 dataworks-macos-arm64 dataworks-server-macos-arm64 install.img dataworks-amd64-ubuntu.deb -n "Version \`$(make get-version)\` was built in this release"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
